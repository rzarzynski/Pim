#!/usr/bin/env python2

# Copyright (c) 2010 James Campos

### TODO ###
# resolve scrollbar issue
# hide pointer in fullscreen
# status text
# better shift masking
# rotating
# pim.desktop
# mouse panning / keybinds
# fit width / height
# marking (echo $current >> pim-marked)
# set as wallpaper
# animated gifs
# python3

### Thanks ###
# alterecco, for making [visible](http://drop.dotright.net/visible) (dead),
#   and inspiring me to make this program.


### Pim ###
# A Python image viewer with vim-like keybindings.
# v0.2.0

from optparse import OptionParser
from random import shuffle
import mimetypes
import glib
import gtk
from gtk import keysyms as keys
from gtk import gdk
import os
import shutil


class Pim:
    def __init__(self):
        self.fullscreen = False
        self.slideshow = False
        self.slideshow_delay = 5
        self.cur_hide_delay = 2
        self.scroll_step = 20
        self.random = False
        self.recursive = False
        self.zoom_lock = False

        self.binds = (
            #(cmd, function, args)
            ('q',           self.quit),
            ('f',           self.toggle_fullscreen),

            #if True, scroll in the horizontal direction.
            ('h',           self.scroll, gtk.SCROLL_STEP_BACKWARD, True),
            ('j',           self.scroll, gtk.SCROLL_STEP_FORWARD, False),
            ('k',           self.scroll, gtk.SCROLL_STEP_BACKWARD, False),
            ('l',           self.scroll, gtk.SCROLL_STEP_FORWARD, True),

            ('H',           self.scroll, gtk.SCROLL_PAGE_BACKWARD, True),
            ('J',           self.scroll, gtk.SCROLL_PAGE_FORWARD, False),
            ('K',           self.scroll, gtk.SCROLL_PAGE_BACKWARD, False),
            ('L',           self.scroll, gtk.SCROLL_PAGE_FORWARD, True),

            ('<left>',      self.scroll, gtk.SCROLL_STEP_BACKWARD, True),
            ('<down>',      self.scroll, gtk.SCROLL_STEP_FORWARD, False),
            ('<up>',        self.scroll, gtk.SCROLL_STEP_BACKWARD, False),
            ('<right>',     self.scroll, gtk.SCROLL_STEP_FORWARD, True),

            ('w',           self.scroll, gtk.SCROLL_STEP_BACKWARD, False),
            ('a',           self.scroll, gtk.SCROLL_STEP_BACKWARD, True),
            ('s',           self.scroll, gtk.SCROLL_STEP_FORWARD, False),
            ('d',           self.scroll, gtk.SCROLL_STEP_FORWARD, True),

            ('W',           self.scroll, gtk.SCROLL_PAGE_BACKWARD, False),
            ('A',           self.scroll, gtk.SCROLL_PAGE_BACKWARD, True),
            ('S',           self.scroll, gtk.SCROLL_PAGE_FORWARD, False),
            ('D',           self.scroll, gtk.SCROLL_PAGE_FORWARD, True),

            ('g',           self.scroll, gtk.SCROLL_START, False),
            ('G',           self.scroll, gtk.SCROLL_END, False),

            ('T',           self.zoom_delta, -.5),
            ('t',           self.zoom_delta, +.5),
            ('b',           self.move_index, -1),
            ('e',           self.toggle_slideshow),
            ('X',           self.delete, -1),
            ('x',           self.delete, 0),
            ('z',           self.toggle_zoom_lock),

            ('<minus>1',    self.zoom_to, 1),
            ('<minus>2',    self.zoom_to, 2),
            ('<minus>3',    self.zoom_to, 3),
            #back to fullscreen
            ('<minus>5',    self.zoom_to, 0),

            ('<space>',     self.move_index, 1),
            ('<SPACE>',     self.move_index, -1),
            )


    def toggle_zoom_lock(self):
        self.zoom_lock = not self.zoom_lock


    def delete(self, delta):
        current = self.paths[self.index]
        self.paths.remove(current)
        try:
            # lchmod doesn't seem to exist so use this ugly sequence instead
            fd = os.open(current, os.O_RDONLY | os.O_NOFOLLOW)
            os.fchmod(fd, 0600)
            os.close(fd)
            file = os.path.basename(current)
            shutil.move(current, '/tmp/pim_trashed-%s' % file)
        except (OSError, IOError) as e:
            print e
        if not self.paths:
            self.quit()
        else:
            self.move_index(delta)


    def quit(self, remember_position = False):
        if remember_position and len(self.paths):
            try:
                # the builtin open follows symlinks which is danger due to a race condition
                fd = os.open('pim-position', os.O_WRONLY | os.O_NOFOLLOW | os.O_TRUNC | os.O_CREAT, 0600)
                os.fchmod(fd, 0600)
                with os.fdopen(fd, 'w') as f:
                    f.writelines(self.paths[self.index])
            except (OSError, IOError) as e:
                print e
        try:
            gtk.main_quit()
        except RuntimeError:
            import sys
            sys.exit(1)


    def scroll(self, scrolltype, horizontal):
        if horizontal:
            adj = self.scrolled_win.get_hadjustment()
        else:
            adj = self.scrolled_win.get_vadjustment()

        view_size = adj.get_page_size()
        val_cur = adj.get_value()
        val_max = adj.get_upper() - view_size

        if scrolltype == gtk.SCROLL_STEP_FORWARD:
            val_dst = min(val_cur + self.scroll_step, val_max)
        elif scrolltype == gtk.SCROLL_STEP_BACKWARD:
            val_dst = max(val_cur - self.scroll_step, 0)
        elif scrolltype == gtk.SCROLL_START:
            val_dst = 0
        elif scrolltype == gtk.SCROLL_END:
            val_dst = val_max

        adj.set_value(val_dst)


    def toggle_slideshow(self):
        self.slideshow = not self.slideshow
        if self.slideshow:
            self.timer_id = glib.timeout_add_seconds(self.slideshow_delay, self.move_index, 1)
        else:
            glib.source_remove(self.timer_id)
        self.update_title()


    def toggle_fullscreen(self):
        self.fullscreen = not self.fullscreen
        if self.fullscreen:
            self.cur_hide()
            self.win.fullscreen()
            self.zoom_percent = self.get_fullscreen_zoom_percent()
        else:
            self.win.unfullscreen()
            self.zoom_percent = 1
        self.update_image()


    def get_fullscreen_zoom_percent(self):
        pboWidth = self.pixbufOriginal.get_width()
        pboHeight = self.pixbufOriginal.get_height()
        pbRatio = float(pboWidth) / float(pboHeight)

        if pbRatio > self.sRatio:
            #pixbuf is proportionally wider than screen
            return float(self.sWidth) / float(pboWidth)
        else:
            return float(self.sHeight) / float(pboHeight)


    def update_image(self):
        ''' Show the final image '''

        pboWidth = self.pixbufOriginal.get_width()
        pboHeight = self.pixbufOriginal.get_height()
        if self.zoom_percent is 1:
            pixbufFinal = self.pixbufOriginal
            pbfWidth = pboWidth
            pbfHeight = pboHeight
        else:
            pbfWidth = int(pboWidth * self.zoom_percent)
            pbfHeight = int(pboHeight * self.zoom_percent)
            pixbufFinal = self.pixbufOriginal.scale_simple(
                    pbfWidth, pbfHeight, gdk.INTERP_BILINEAR)
        self.image.set_from_pixbuf(pixbufFinal)

        self.update_title()
        if not self.fullscreen:
            self.resize_window(pbfWidth, pbfHeight)


    def resize_window(self, pbfWidth, pbfHeight):
        winWidth  = min(pbfWidth, self.sWidth)
        winHeight = min(pbfHeight, self.sHeight)
        self.win.resize(winWidth, winHeight)


    def update_title(self):
        self.win.set_title("pim %d/%d %d%% %s%s" % (
            self.index,
            len(self.paths),
            self.zoom_percent * 100,
            self.paths[self.index], ' [slideshow]' if self.slideshow else ''))


    def zoom_delta(self, delta):
        self.zoom_percent = self.zoom_percent + delta
        self.update_image()


    def zoom_to(self, percent):
        self.zoom_percent = percent if percent else self.get_fullscreen_zoom_percent()
        self.update_image()


    def move_index(self, delta):
        dst_idx = self.index + delta
        while len(self.paths):
            self.index = dst_idx % len(self.paths)
            path = self.paths[self.index]
            try:
                self.pixbufOriginal = gdk.pixbuf_new_from_file(path)
                break
            except glib.GError as e:
                self.paths.remove(path)
                print e
        else:
            self.quit()

        if not self.zoom_lock:
            if self.fullscreen:
                self.zoom_percent = self.get_fullscreen_zoom_percent()
            else:
                self.zoom_percent = 1
        self.update_image()

        #reshuffle on wrap-around
        if self.random and self.index is 0 and delta > 0:
            shuffle(self.paths)

        self.scroll(gtk.SCROLL_START, False)
        self.scroll(gtk.SCROLL_START, True)

        #for the slideshow
        return True


    def parse_args(self):
        usage = "usage: %prog [options] path1 [path2 path3 ...]"
        parser = OptionParser(usage=usage)
        parser.add_option("-S", "--shuffle", action="store_true", dest="random", help="randomize filelist", default=self.random)
        parser.add_option("-s", "--no-shuffle", action="store_false", dest="random", help="don't randomize")
        parser.add_option("-R", "--recursion", action="store_true", dest="recursive", help="scan for images recursively", default=self.recursive)
        parser.add_option("-r", "--no-recursion", action="store_false", dest="recursive", help="don't scan recursively")
        (options, args) = parser.parse_args()
        self.random = options.random
        self.recursive = options.recursive

        if len(args) is 0:
            parser.error('need at least one path!')

        if not self.populate(args):
            parser.error('no loadable images detected')


    def populate(self, args):
        ''' Generate a list of paths from the given arguments '''

        def add_everything(paths, first_loop = True):
            dirs  = []
            files = []
            for path in paths:
                #remove unsupported files
                if os.path.isfile(path) and mimetypes.guess_type(path)[0] in types:
                    files.append(path)
                elif os.path.isdir(path):
                    dirs.append(path)
            files.sort()
            self.paths.extend(files)
            if not self.recursive and not first_loop:
                return
            for dir in dirs:
                dir_items = (os.path.join(dir, item) for item in os.listdir(dir))
                add_everything(dir_items, False)

        #get supported mimetypes
        types = []
        for pixbuf_format in gdk.pixbuf_get_formats():
            types.extend(pixbuf_format['mime_types'])

        #if only one arg passed, do special stuff
        single = None
        if len(args) is 1:
            arg = args[0]
            if os.path.isfile(arg):
                #use parent directory
                single = os.path.abspath(args[0])
                directory = os.path.dirname(single)
                args = (directory,)
            elif os.path.isdir(arg):
                try:
                    f = open('pim-position')
                    single = f.read()
                except IOError:
                    pass

        #add everything
        self.paths = []
        args = (os.path.abspath(arg) for arg in args)
        add_everything(args)

        #shuffle
        if self.random:
            shuffle(self.paths)

        #complete special stuff for single arg
        if single and single in self.paths:
            self.index = self.paths.index(single)
        else:
            self.index = 0

        return len(self.paths)


    def cur_hide(self):
        pixmap = gtk.gdk.Pixmap(None, 1, 1, 1)
        color = gtk.gdk.Color()
        cursor = gtk.gdk.Cursor(pixmap, pixmap, color, color, 0, 0)
        self.win.window.set_cursor(cursor)


    def cur_handle_move(self, *unused):
        glib.source_remove(self.cur_timer_id)
        self.cur_timer_id = glib.timeout_add_seconds(self.cur_hide_delay, self.cur_hide)
        self.win.window.set_cursor(None)


    def try_exec_cmd(self, cmd, times, fltr_func = None):
        fltd_binds = filter(fltr_func or (lambda bind: bind[0] == cmd), self.binds)

        if len(fltd_binds) == 1:
            funk = fltd_binds[0][1]
            args = fltd_binds[0][2:]

            while times > 0:
                funk(*args)
                times = times - 1

        return fltd_binds


    def key_handle_press(self, widget, ev):
        kv = ev.keyval
        if kv == keys.Shift_L or kv == keys.Shift_R:
            return
        elif kv == keys.BackSpace:
            self.key_cmd = self.key_cmd[:-1]
        elif kv == keys.Escape:
            self.key_cmd = []
        else:
            kn = gdk.keyval_name(kv)
            if len(kn) > 1:
                kn = '<%s>' % (ev.state & gdk.SHIFT_MASK and kn.upper() or kn.lower())
            self.key_cmd.append(kn)

            pos = 0
            for elem in self.key_cmd:
                if not elem.isdigit():
                    break
                pos = pos + 1

            tms_prt = self.key_cmd[:pos]
            tms = int(''.join(tms_prt) or 1)
            cmd_prt = self.key_cmd[pos:]
            cmd = str(''.join(cmd_prt))

            if cmd and self.try_exec_cmd(cmd, tms):
                self.key_cmd = []
            return


    def main(self):
        self.parse_args()

        screen = gdk.Screen()
        self.sWidth = screen.get_width()
        self.sHeight = screen.get_height()
        self.sRatio = float(self.sWidth) / float(self.sHeight)

        self.key_cmd = []
        self.cur_timer_id = glib.timeout_add_seconds(self.cur_hide_delay, self.cur_hide)

        self.win = gtk.Window()
        self.win.set_resizable(True)
        self.win.set_property('allow-shrink', True)
        self.win.add_events(gtk.gdk.KEY_PRESS_MASK | gtk.gdk.POINTER_MOTION_MASK)
        self.win.connect('destroy', gtk.main_quit)
        self.win.connect('key-press-event', self.key_handle_press)
        self.win.connect('motion-notify-event', self.cur_handle_move)

        self.scrolled_win = gtk.ScrolledWindow()
        self.scrolled_win.set_policy(gtk.POLICY_NEVER, gtk.POLICY_NEVER)
        self.win.add(self.scrolled_win)

        viewport = gtk.Viewport()
        viewport.modify_bg(gtk.STATE_NORMAL, gdk.color_parse('#000000'))
        viewport.set_shadow_type(gtk.SHADOW_NONE)
        self.scrolled_win.add(viewport)

        self.image = gtk.Image()
        viewport.add(self.image)

        self.move_index(0)
        self.win.show_all()
        if self.fullscreen:
            self.win.fullscreen()
        gtk.main()


Pim().main()
